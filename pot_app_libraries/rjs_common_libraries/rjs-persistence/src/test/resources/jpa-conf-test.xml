<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc 		http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
						http://www.springframework.org/schema/beans 	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
						http://www.springframework.org/schema/util 		http://www.springframework.org/schema/util/spring-util-4.1.xsd
						http://www.springframework.org/schema/tx 		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
						http://www.springframework.org/schema/context 	http://www.springframework.org/schema/context/spring-context-4.1.xsd">
						
	<import resource="classpath:META-INF/spring/jpa-persistence-conf.xml" />
	<context:annotation-config />    <!-- Enable Spring declarative transaction management on annotated classes -->
	<tx:annotation-driven transaction-manager="transactionManager" />    <!-- A transaction manager for working with JPA EntityManagerFactories -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="defaultEntityManagerFactory" />
	</bean>
	<bean id="defaultEntityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		parent="abstractEntityManagerFactory" lazy-init="true">
		<property name="dataSource" ref="gsdatasource" />
		<property name="persistenceUnitName" value="mysql_pu" />
		<property name="persistenceUnitPostProcessors">
			<list>
				<ref bean="nonTransactionalJTAPersistenceUnit" />
				<ref bean="entityScanner" />
			</list>
		</property>
	</bean>
	<bean id="gsdatasource"
		class="com.rjtech.egsframework.persistence.datasources.DatasourceRouter"
		lazy-init="true">
		<property name="targetDataSources">
			<map>
				<entry key="RODS" value-ref="mysqldatasource" />
				<entry key="RWDS" value-ref="mysqldatasource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="mysqldatasource" />
	</bean>
	<bean id="mysqldatasource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://dxbegsq07dv:3306/egspringplus?zeroDateTimeBehavior=convertToNull" />
		<property name="username" value="egs_user" />
		<property name="password" value="egs_user" />
	</bean>    <!-- <bean id="xADataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/> <property 
		name="url" value="jdbc:mysql://lnxdevvm92:6516/jfoundation?zeroDateTimeBehavior=convertToNull"/> 
		<property name="username" value="jf_user"/> <property name="password" value="jf_user"/> 
		</bean> -->    <!--<util:properties id="jpaProperties"><prop key="hibernate.show_sql">true</prop><prop 
		key="hibernate.format_sql">true</prop><prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JTATransactionFactory</prop><prop 
		key="hibernate.transaction.manager_lookup_class">org.hibernate.transaction.JOTMTransactionManagerLookup</prop><prop 
		key="hibernate.transaction.flush_before_completion">false</prop><prop key="hibernate.transaction.auto_close_session">true</prop><prop 
		key="hibernate.current_session_context_class">jta</prop><prop key="hibernate.connection.release_mode">auto</prop></util:properties> -->
	<util:properties id="jpaProperties">
		<prop key="hibernate.show_sql">true</prop>
		<prop key="hibernate.format_sql">true</prop>
		<prop key="hibernate.transaction.flush_before_completion">false</prop>
		<prop key="hibernate.transaction.auto_close_session">true</prop>
		<prop key="hibernate.current_session_context_class">jta</prop>
		<prop key="hibernate.connection.release_mode">auto</prop>
	</util:properties>    <!-- s779372 commented <bean id="auditreadDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/> <property 
		name="url" value="jdbc:mysql://lnxdevvm92:6516/jfoundation?zeroDateTimeBehavior=convertToNull"/> 
		<property name="username" value="jf_user"/> <property name="password" value="jf_user"/> 
		</bean> <bean id="auditwriteDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/> <property 
		name="url" value="jdbc:mysql://lnxdevvm92:6516/jfoundation?zeroDateTimeBehavior=convertToNull"/> 
		<property name="username" value="jf_user"/> <property name="password" value="jf_user"/> 
		</bean> <bean id="auditXADataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/> <property 
		name="url" value="jdbc:mysql://lnxdevvm92:6516/jfoundation?zeroDateTimeBehavior=convertToNull"/> 
		<property name="username" value="jf_user"/> <property name="password" value="jf_user"/> 
		</bean> -->    <!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->    <!-- Activates various annotations to be detected in bean classes: Spring's 
		@Required and @Autowired, as well as JSR 250's @PostConstruct, @PreDestroy 
		and @Resource (if available) and JPA's @PersistenceContext and @PersistenceUnit 
		(if available). -->    <!-- <context:component-scan base-package="com.rjtech.egsframework.genericservices"></context:component-scan> -->    <!-- Simply defining this bean will cause requests to owner names to be saved. 
		This aspect is defined in petclinic.jar's META-INF/aop.xml file. Note that 
		we can dependency inject this bean like any other bean. <bean class="org.springframework.samples.petclinic.aspects.UsageLogAspect" 
		p:historySize="300"/> -->    <!-- Post-processor to perform exception translation on @Repository classes 
		(from native exceptions such as JPA PersistenceExceptions to Spring's DataAccessException 
		hierarchy). -->    <!-- <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/> -->
</beans>