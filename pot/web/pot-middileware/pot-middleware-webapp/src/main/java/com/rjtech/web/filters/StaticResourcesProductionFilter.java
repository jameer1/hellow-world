package com.rjtech.web.filters;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.http.HttpHeaders;

/**
 * This filter is used in production, to serve static resources generated by
 * "grunt build".
 * <p/>
 * <p>
 * It is configured to serve resources from the "dist" directory, which is the
 * Grunt destination directory.
 * </p>
 */
public class StaticResourcesProductionFilter implements Filter {

    public void init(FilterConfig filterConfig) throws ServletException {
        // Nothing to initialize
    }

    public void destroy() {
        // Nothing to destroy
    }

    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        String contextPath = ((HttpServletRequest) request).getContextPath();
        String requestURI = httpRequest.getRequestURI();
        requestURI = StringUtils.substringAfter(requestURI, contextPath);
        if (StringUtils.equals("/", requestURI) || StringUtils.equals("/login", requestURI)
                || StringUtils.equals("/potlogin", requestURI)) {
            requestURI = "/index.html";
            String newURI = requestURI;
            request.getRequestDispatcher(newURI).forward(request, response);

        } else {
            HttpServletResponse httpServletResponse = (HttpServletResponse) response;
            // Cache the static resource for one day
            httpServletResponse.addHeader(HttpHeaders.CACHE_CONTROL, "max-age=86400, must-revalidate");
            chain.doFilter(request, httpServletResponse);
        }
    }
}
