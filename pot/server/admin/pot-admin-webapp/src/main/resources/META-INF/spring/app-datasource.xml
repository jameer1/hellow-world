<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">



    <import resource="classpath:META-INF/spring/jpa-persistence-conf.xml"/>
    <import resource="classpath:META-INF/spring/jdbc-persistence-conf.xml"/>


    <tx:jta-transaction-manager/>
    <context:annotation-config/>


    <jee:jndi-lookup id="potReadDataSource" jndi-name="java:jboss/datasources/jdbc/potRODS" lookup-on-startup="true"
                     proxy-interface="javax.sql.DataSource"/>
    <jee:jndi-lookup id="potWriteDataSource" jndi-name="java:jboss/datasources/jdbc/potRWDS" lookup-on-startup="true"
                     proxy-interface="javax.sql.DataSource"/>
    <jee:jndi-lookup id="potXADataSource" jndi-name="java:jboss/datasources/jdbc/potXADS" lookup-on-startup="true"
                     proxy-interface="javax.sql.DataSource"/>

    <bean id="dataSource" primary="true"
          class="com.rjtech.rjs.persistence.datasources.DatasourceRouter"
          lazy-init="true">
        <property name="targetDataSources">
            <map>
                <entry key="RODS" value-ref="potReadDataSource"/>
                <entry key="RWDS" value-ref="potWriteDataSource"/>
                <entry key="XADS" value-ref="potXADataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="potXADataSource"/>
    </bean>
    <alias name="dataSource" alias="defaultJDBCDataSource"/>
   

	<util:map id="entityMangerFactoryMap">
	</util:map>
	
	
    <bean id="defaultEntityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          parent="abstractEntityManagerFactory" lazy-init="true">
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceUnitName" value="oracle_pu"/>
    </bean>

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          parent="abstractEntityManagerFactory" lazy-init="true">
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceUnitName" value="oracle_pu"/>
    </bean>





    <util:properties id="jpaProperties">
        <prop key="hibernate.show_sql">false</prop>
        <prop key="hibernate.format_sql">true</prop>
        <prop key="hibernate.hbm2ddl.auto">none</prop>
       <prop key="hibernate.transaction.manager_lookup_class">org.hibernate.transaction.JBossTransactionManagerLookup</prop>
        <prop key="hibernate.transaction.flush_before_completion">false</prop>
        <prop key="hibernate.transaction.auto_close_session">true</prop>
        <prop key="hibernate.current_session_context_class">jta</prop>
        <prop key="hibernate.connection.release_mode">auto</prop>
        <prop key="hibernate.transaction.jta.platform">org.hibernate.service.jta.platform.internal.JBossAppServerJtaPlatform</prop>
        <prop key="hibernate.ejb.interceptor.session_scoped">com.rjtech.common.interceptor.HibernateInterceptor</prop>
        
    </util:properties>

    <!-- Add JPA support -->
    <!-- <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceXmlLocation" value="classpath*:META-INF/spring/persistence-spring.xml"/>
        <property name="dataSource" ref="dataSource"/> <property name="jpaVendorAdapter">
        <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="showSql" value="true"/> <property name="generateDdl" value="false"/>
        <property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect"/>
        </bean> </property> </bean> -->

    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative
        to JTA) -->
    <!-- <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
        p:entityManagerFactory-ref="entityManagerFactory"/> -->


    <!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

    <!--
        Activates various annotations to be detected in bean classes: Spring's
        @Required and @Autowired, as well as JSR 250's @PostConstruct,
        @PreDestroy and @Resource (if available) and JPA's @PersistenceContext
        and @PersistenceUnit (if available).
    -->
    <context:annotation-config/>

    <!-- Instruct Spring to perform declarative transaction management automatically
        on annotated classes. for mode="aspectj"/ see SPR-6392 -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> <tx:jta-transaction-manager/> -->

    <!--
        Simply defining this bean will cause requests to owner names to be saved.
        This aspect is defined in petclinic.jar's META-INF/aop.xml file.
        Note that we can dependency inject this bean like any other bean.

    <bean class="org.springframework.samples.petclinic.aspects.UsageLogAspect" p:historySize="300"/>
    -->
    <!--
        Post-processor to perform exception translation on @Repository classes (from native
        exceptions such as JPA PersistenceExceptions to Spring's DataAccessException hierarchy).

    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
    -->

</beans>